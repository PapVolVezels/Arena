//Macro's
#define QUEUEMOTORX 1
#define QUEUEMOTORY 2
#define QUEUEPRESSURE 3
#define QUEUECOMMAND 4
#define QUEUEUS 5
#define CONNECTION 0											//Connectie van slave naar master is altijd 0
#define MOTORX OUT_A											//Vul hier de gebruikte poorten in
#define MOTORY OUT_B
#define SENSORTOUCH SENSOR_1
#define SENSORTOUCHPORT S1
#define SENSORUS SENSOR_2
#define SENSORUSPORT S2

//Connectiestatustask
task ConnectionStatus()
	{
		while(true)
			{
				ClearLine(LCD_LINE2);
				ClearLine(LCD_LINE1);
				TextOut(5,LCD_LINE1, "BT status:");
				NumOut(75,LCD_LINE1, BluetoothStatus(CONNECTION) );
				if (BluetoothStatus(CONNECTION) == -32)
					{
						TextOut(5,LCD_LINE2,"Bluetoetoeter!");
					}
				else if(BluetoothStatus(CONNECTION) == 32)
					{
						TextOut(5,LCD_LINE2,"BT = busy");
					}
				else if(BluetoothStatus(CONNECTION) == 0)
					{
						TextOut(5,LCD_LINE2,"BT = idle");
					}
				else
					{
						TextOut(5,LCD_LINE2,"Unknown BT status.");
					}
				Wait(100);
			}
	}

//Klemmotor
	void MotorX()											//Ontvang de verzochte snelheid voor de klemmotor (MotorX)
		{
			char error;
			int vel;									//"vel" en "value" betekenen hetzelfde als bij master
			until(BluetoothStatus(CONNECTION) == NO_ERR);
			error = ReceiveRemoteNumber(QUEUEMOTORX, true, vel);
			if(error == NULL)
				{
					ClearLine(LCD_LINE5);
					TextOut(5,LCD_LINE5, "MotorX:");
					NumOut(75,LCD_LINE5, vel);
					OnFwd(MOTORX, vel);
				}
		}
	
//Gripmotor
	void MotorY()											//Ontvang de verzochte snelheid voor de klemmotor (MotorY)
		{
			char error;
			int vel;									//"vel" en "value" betekenen hetzelfde als bij master
			until(BluetoothStatus(CONNECTION) == NO_ERR);
			error = ReceiveRemoteNumber(QUEUEMOTORY, true, vel);
			if(error == NULL)
				{
					ClearLine(LCD_LINE6);
					TextOut(5,LCD_LINE6, "MotorY:");
					NumOut(75,LCD_LINE6, vel);
					OnFwd(MOTORY, vel);
				}
		}

//Druksensor
	void DrukSensor()										//Stuur de waarde van Druksensor
		{
			int value;
			value = SENSORTOUCH;
			TextOut(5, LCD_LINE3, "Druksensor:");
			NumOut(75, LCD_LINE3, value);
			until(BluetoothStatus(CONNECTION) == NO_ERR);
			SendResponseNumber(QUEUEPRESSURE, value);
		}
		
//Ultrasonesensor
	void UltraSoneSensor()										//Stuur de waarde van Druksensor
		{
			int value;
			value = SensorUS(SENSORUSPORT);
			ClearLine(LCD_LINE4);
			TextOut(5, LCD_LINE4, "Ultrasone:");
			NumOut(75, LCD_LINE4, value);
			until(BluetoothStatus(CONNECTION) == NO_ERR);
			SendResponseNumber(QUEUEUS, value);
		}

task main()
	{
		SetSensorTouch(SENSORTOUCHPORT);
		SetSensorLowspeed(SENSORUSPORT);
		start ConnectionStatus;
	}
